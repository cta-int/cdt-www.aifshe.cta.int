<?php

namespace Cta\AisheBundle\Entity\Repository;

use Cta\AisheBundle\Entity\Page as PageEntity;
use Cta\AisheBundle\Entity\PageTranslation as PageTranslationEntity;
use Devart\CommonBundle\Entity\Repository\Base;
use Doctrine\ORM\ORMInvalidArgumentException;
use Doctrine\ORM\Query;

/**
 * Page
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Page extends Base
{
    /**
     * @param $id
     *
     * @return mixed
     */
    public function findById($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('p')
            ->from('CtaAisheBundle:Page', 'p')
            ->andWhere('p.id = :id')
            ->andWhere('p.status = :status')
            ->setParameter('id', $id)
            ->setParameter('status', PageEntity::ST_ACTIVE)
            ->getQuery();

        try {
            return $query->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @param $identifier
     * @param $lang
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByIdentifier($identifier, $lang)
    {
        if (!is_int($lang) || $lang < 1 || $identifier == '') {
            throw new ORMInvalidArgumentException('wrong parameters inserted.');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('p', 'pt')
            ->from('CtaAisheBundle:Page', 'p')
            ->leftJoin(
                'p.pageTranslations', 'pt', Query\Expr\Join::WITH,
                $qb->expr()->eq('pt.status', PageTranslationEntity::ST_ACTIVE)
            )
            ->andWhere('p.status = :status')
            ->andWhere('p.identifier = :identifier')
            ->andWhere('pt.lang = :lang')
            ->setParameter('identifier', $identifier)
            ->setParameter('lang', $lang)
            ->setParameter('status', PageEntity::ST_ACTIVE)
            ->getQuery();

        return $query->getSingleResult(Query::HYDRATE_ARRAY);
    }

    /**
     * @return array
     */
    public function findAllWithoutTranslations()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('p', 'user_mo')
            ->from('CtaAisheBundle:Page', 'p')
            ->leftJoin('p.modifiedBy', 'user_mo')
            ->andWhere('p.status = :status')
            ->setParameter('status', PageEntity::ST_ACTIVE)
            ->getQuery();

        return $query->getArrayResult();
    }
}
