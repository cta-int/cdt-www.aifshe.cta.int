<?php

namespace Cta\AisheBundle\Entity\Repository;

use Devart\CommonBundle\Entity\Repository\Base;
use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\ORMInvalidArgumentException;
use Doctrine\ORM\Query;

/**
 * Criterion
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Criterion extends Base
{
    /**
     * @param $lang
     * @param null $id
     * @return array
     * @throws \Doctrine\ORM\ORMInvalidArgumentException
     */
    public function findOverview($lang, $id = null)
    {
        if (!is_int($lang) || $lang < 1) {
            throw new ORMInvalidArgumentException('function expects $lang to be an integer of 1 or bigger.');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('c', 'ci', 'ct', 'cit', 'cr', 'c_user_cr', 'c_user_mo', 'ci_user_cr', 'ci_user_mo')
            ->from('CtaAisheBundle:Criterion'           , 'c')
            ->leftJoin('c.criterionItems'               , 'ci', Query\Expr\Join::WITH, $qb->expr()->eq('ci.status', \Cta\AisheBundle\Entity\CriterionItem::ST_ACTIVE))
            ->leftJoin('c.criterionTranslations'        , 'ct', Query\Expr\Join::WITH, $qb->expr()->eq('ct.status', \Cta\AisheBundle\Entity\CriterionTranslation::ST_ACTIVE) . ' AND ' . $qb->expr()->eq('ct.lang', $lang))
            ->leftJoin('ci.criterionItemTranslations'   , 'cit', Query\Expr\Join::WITH, $qb->expr()->eq('cit.status', \Cta\AisheBundle\Entity\CriterionItemTranslation::ST_ACTIVE) . ' AND ' . $qb->expr()->eq('cit.lang', $lang))
            ->leftJoin('ci.certificationRequirements'   , 'cr', Query\Expr\Join::WITH, $qb->expr()->eq('cr.status', \Cta\AisheBundle\Entity\CertificationRequirement::ST_ACTIVE))
            ->leftJoin('c.createdBy'                    , 'c_user_cr')
            ->leftJoin('c.modifiedBy'                   , 'c_user_mo')
            ->leftJoin('ci.createdBy'                   , 'ci_user_cr')
            ->leftJoin('ci.modifiedBy'                  , 'ci_user_mo')
            ->andWhere('c.status = :status')
            ->setParameter('status', \Cta\AisheBundle\Entity\Criterion::ST_ACTIVE)
            ->addOrderBy('c.chapterNr', 'ASC')
            ->addOrderBy('ci.paragraphNr', 'ASC');

        if (!is_null($id)) {
            $query->andWhere('c.id = :id');
            $query->setParameter('id', $id);
        }

        $result = $query->getQuery()->getArrayResult();

        if (!is_null($id)) {
            if (count($result)) {
                return $result[0];
            } else {
                return null;
            }
        } else {
            return $result;
        }

    }

    /**
     * @param $id
     * @throws \Doctrine\ORM\EntityNotFoundException
     */
    public function delete($id)
    {
        $em = $this->getEntityManager();

        $criterion = $em->getRepository('CtaAisheBundle:Criterion')->find($id);
        if (!$criterion) {
            throw new EntityNotFoundException('Entity with id [' . $id . '] could not be found.');
        }

        // flag translations as deleted
        foreach ($criterion->getCriterionTranslations() as $criterionTranslation) {
            $criterionTranslation->setStatus(\Cta\AisheBundle\Entity\CriterionTranslation::ST_DELETED);
        }

        // flag criterionItems as deleted
        foreach ($criterion->getCriterionItems() as $criterionItem) {

            // flag criterionItemTranslations as deleted
            foreach ($criterionItem->getCriterionItemTranslations() as $criterionItemTranslations) {
                $criterionItemTranslations->setStatus(\Cta\AisheBundle\Entity\CriterionItemTranslation::ST_DELETED);
            }

            // flag certificationRequirements as deleted
            foreach ($criterionItem->getCertificationRequirements() as $certificationRequirements) {
                $certificationRequirements->setStatus(\Cta\AisheBundle\Entity\CertificationRequirement::ST_DELETED);
            }

            $criterionItem->setStatus(\Cta\AisheBundle\Entity\CriterionItem::ST_DELETED);
        }

        // flag criterion as deleted
        $criterion->setStatus(\Cta\AisheBundle\Entity\Criterion::ST_DELETED);

        // save changes
        $em->flush();
    }
}