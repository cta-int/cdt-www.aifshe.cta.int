<?php

namespace Cta\AisheBundle\Entity\Repository;

use Cta\AisheBundle\Entity\CriterionItem;
use Cta\AisheBundle\Entity\Report;
use Cta\AisheBundle\Entity\ReportItem as ReportItemEntity;
use Devart\CommonBundle\Entity\Repository\Base;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\ORMInvalidArgumentException;
use Doctrine\ORM\Query;

/**
 * ReportItem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportItem extends Base
{
    public function findByReportAndCriterionItem($reportId, $criterionItemId)
    {
        if (!is_int($reportId) || !is_int($criterionItemId) || $reportId < 1 || $criterionItemId < 1) {
            throw new ORMInvalidArgumentException('function expects $reportId, $criterionItemId to be an integer of 1 or bigger.');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('ri')
            ->from('CtaAisheBundle:ReportItem'  , 'ri')
            ->leftJoin('ri.report'              , 'r', Query\Expr\Join::WITH, $qb->expr()->neq('r.status', Report::ST_DELETED))
            ->leftJoin('ri.criterionItem'       , 'ci', Query\Expr\Join::WITH, $qb->expr()->eq('ci.status', CriterionItem::ST_ACTIVE))
            ->andWhere('ri.status = :status')
            ->andWhere('r.id = :reportId')
            ->andWhere('ci.id = :criterionItemId')
            ->setParameter('reportId', $reportId)
            ->setParameter('criterionItemId', $criterionItemId)
            ->setParameter('status', ReportItemEntity::ST_ACTIVE)
            ->getQuery();

        try {
            return $query->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }
}
