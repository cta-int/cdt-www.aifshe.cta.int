<?php

namespace Cta\AisheBundle\Entity\Repository;

use Cta\AisheBundle\Entity\Report as ReportEntity;
use Devart\CommonBundle\Entity\Repository\Base;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\ORMInvalidArgumentException;
use Doctrine\ORM\Query;

/**
 * Report
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Report extends Base
{
    /**
     * @param array $params
     * @return array
     */
    public function findOverview(array $params = array())
    {
        $result = array(
            'items' => array(),
            'count' => 0,
        );

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('r', 'user_cr', 'user_mo', 'i')
            ->from(ReportEntity::class  , 'r')
            ->leftJoin('r.createdBy'    , 'user_cr')
            ->leftJoin('r.modifiedBy'   , 'user_mo')
            ->leftJoin('r.institution'  , 'i', Query\Expr\Join::WITH, $qb->expr()->eq('i.status', \Cta\AisheBundle\Entity\Institution::ST_ACTIVE))
            ->andWhere('r.status != :status')
            ->setParameter('status', ReportEntity::ST_DELETED)
            ->orderBy('r.createdAt', 'DESC');

        if (array_key_exists('user', $params)) {
            $user = $params['user'];
            if (array_key_exists('isAdmin', $params) && $params['isAdmin']) {
                // show everything from everyone
            } else if (array_key_exists('isAuditor', $params) && $params['isAuditor']) {
                // show all created by this user + those from the same institution that are official +
                $query->andWhere('r.createdBy = :creator OR (r.institution = :institution AND (r.isOfficial=1 OR (r.status IN (:approveStatus))))');
                $query->setParameter('creator', $user);
                $query->setParameter('institution', $user->getInstitution());
                $query->setParameter('approveStatus', [ReportEntity::ST_APPROVAL_REQUESTED, ReportEntity::ST_APPROVAL_DENIED, ReportEntity::ST_APPROVED]);
            } else {
                // show only the reports from this user
                $query->addSelect('users');
                $query->leftJoin('r.users', 'users');
                $query->andWhere('r.createdBy = :creator OR users = :creator');
                $query->setParameter('creator', $user);
            }
        }

        $result['count'] = $this->count($query, 'r.id');

        if (array_key_exists('start', $params)) {
            $query->setFirstResult($params['start']);
        }

        if (array_key_exists('limit', $params)) {
            $query->setMaxResults($params['limit']);
        }

        $result['items'] = $query->getQuery()->getArrayResult();
        return $result;
    }

    /**
     * @param $id
     * @return mixed
     */
    public function findNotDeletedById($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('r')
            ->from(ReportEntity::class, 'r')
            ->andWhere('r.id = :id')
            ->andWhere('r.status != :status')
            ->setParameter('id', $id)
            ->setParameter('status', ReportEntity::ST_DELETED)
            ->getQuery();

        try {
            return $query->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @param $id
     * @param $lang
     * @return mixed|null
     * @throws \Doctrine\ORM\ORMInvalidArgumentException
     */
    public function findForShow($id, $lang)
    {
        if (!is_int($lang) || $lang < 1) {
            throw new ORMInvalidArgumentException('wrong parameters inserted.');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('r', 'ri', 'ci', 'c', 'crby', 'i', 'users')
            ->from(ReportEntity::class,         'r')
            ->leftJoin('r.reportItems',             'ri', Query\Expr\Join::WITH, $qb->expr()->eq('ri.status', \Cta\AisheBundle\Entity\ReportItem::ST_ACTIVE))
            ->leftJoin('ri.criterionItem',          'ci', Query\Expr\Join::WITH, $qb->expr()->eq('ci.status', \Cta\AisheBundle\Entity\CriterionItem::ST_ACTIVE))
            ->leftJoin('ci.criterion',              'c', Query\Expr\Join::WITH, $qb->expr()->eq('c.status', \Cta\AisheBundle\Entity\Criterion::ST_ACTIVE))
            ->leftJoin('r.institution',             'i', Query\Expr\Join::WITH, $qb->expr()->eq('i.status', \Cta\AisheBundle\Entity\Institution::ST_ACTIVE))
            ->leftJoin('r.users',                   'users')
            ->leftJoin('r.createdBy',               'crby')
            ->andWhere('r.id = :id')
            ->andWhere('r.status != :status')
            ->setParameter('status', ReportEntity::ST_DELETED)
            ->setParameter('id', $id)
            ->getQuery();

        try {
            return $query->getSingleResult(Query::HYDRATE_ARRAY);
        } catch (NoResultException $e) {
            return null;
        }
    }

    /**
     * @param $id
     * @throws \Doctrine\ORM\EntityNotFoundException
     */
    public function delete($id)
    {
        $em = $this->getEntityManager();

        $report = $em->getRepository(ReportEntity::class)->find($id);
        if (!$report) {
            throw new EntityNotFoundException('Entity with id [' . $id . '] could not be found.');
        }

        // flag reportItems as deleted
        foreach ($report->getReportItems() as $reportItem) {
            $reportItem->setStatus(ReportEntity::ST_DELETED);
        }

        // flag chart settings as deleted
        $report->getChartSettings()->setStatus(\Cta\AisheBundle\Entity\Chart::ST_DELETED);

        // flag report as deleted
        $report->setStatus(ReportEntity::ST_DELETED);

        // save changes
        $em->flush();
    }
}
